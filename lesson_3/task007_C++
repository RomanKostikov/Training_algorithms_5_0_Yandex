#include <iostream>
#include <string>
#include <vector>
#include <set>
#include <algorithm>
#include <sstream>

using namespace std;


int main()
{
    set<pair<int, int>> coords;

    string input;
    getline(cin, input);
    int N = stoi(input);

    for (int i = 0; i < N; i++)
    {
        pair<int, int> tmp;

        getline(cin, input, ' ');
        tmp.first = stoi(input);

        getline(cin, input);
        tmp.second = stoi(input);

        coords.insert(tmp);
    }

    N = coords.size();

    if (N == 1)
    {
        cout << "3" << endl;
        cout << (*coords.begin()).first + 1 << " " << (*coords.begin()).second << endl;
        cout << (*coords.begin()).first + 1 << " " << (*coords.begin()).second + 1 << endl;
        cout << (*coords.begin()).first << " " << (*coords.begin()).second + 1 << endl;
        return 0;
    }
    else if (N == 2)
    {
        cout << "2" << endl;
        pair<int, int> tmp;
        tmp.first = -((*(++coords.begin())).second - (*coords.begin()).second);
        tmp.second = (*(++coords.begin())).first - (*coords.begin()).first;

        cout << tmp.first + (*coords.begin()).first << " " << tmp.second + (*coords.begin()).second << endl;
        cout << tmp.first + (*(++coords.begin())).first << " " << tmp.second + (*(++coords.begin())).second << endl;

        return 0;
    }


    int res = 2;
    pair<int, int> res_point;


    auto it1 = coords.begin();
    auto it2 = coords.begin();

    for (int i = 0; i < N; i++)
    {
        it2 = coords.begin();

        for (int j = 0; j < N; j++)
        {
            if (i == j)
            {
                it2++;
                continue;
            }

            // находим вектор для пары координат и сразу находим ему перпендикулярный
            pair<int, int> tmp;
            tmp.first = (*it1).second - (*it2).second;
            tmp.second = -((*it1).first - (*it2).first);

            // находим две точки
            pair<int, int> point1;
            pair<int, int> point2;
            point1.first = tmp.first + (*it1).first;
            point2.first = tmp.first + (*it2).first;
            point1.second = tmp.second + (*it1).second;
            point2.second = tmp.second + (*it2).second;

            bool point1_test = false;
            bool point2_test = false;
            // проверяем есть ли эти две точки во множестве
            if (coords.contains(point1))
            {
                point1_test = true;
            }
            if (coords.contains(point2))
            {
                point2_test = true;
            }


            if (point1_test && point2_test) // если есть обе (завершаем поиск)
            {
                cout << "0" << endl;
                return 0;
            }

            if ((point1_test || point2_test) && res == 2) // если есть одна
            {
                res = 3;
                res_point = point1_test ? point2 : point1;
            }


            // находим противоположно направленный
            tmp.first = -tmp.first;
            tmp.second = -tmp.second;

            // находим две точки
            point1.first = tmp.first + (*it1).first;
            point2.first = tmp.first + (*it2).first;
            point1.second = tmp.second + (*it1).second;
            point2.second = tmp.second + (*it2).second;

            // проверяем есть ли эти две точки во множестве

            point1_test = false;
            point2_test = false;
            // проверяем есть ли эти две точки во множестве
            if (coords.contains(point1))
            {
                point1_test = true;
            }
            if (coords.contains(point2))
            {
                point2_test = true;
            }


            if (point1_test && point2_test) // если есть обе (завершаем поиск)
            {
                cout << "0" << endl;
                return 0;
            }

            if ((point1_test || point2_test) && res == 2) // если есть одна
            {
                res = 3;
                res_point = point1_test ? point2 : point1;
            }


            it2++;
        }

        it1++;
    }

    if (res == 3)
    {
        cout << "1" << endl << res_point.first << " " << res_point.second << endl;
    }

    if (res == 2)
    {
        // взять две любые точки и добить их
        cout << "2" << endl;
        pair<int, int> tmp;
        tmp.first = -((*(++coords.begin())).second - (*coords.begin()).second);
        tmp.second = (*(++coords.begin())).first - (*coords.begin()).first;

        cout << tmp.first + (*coords.begin()).first << " " << tmp.second + (*coords.begin()).second << endl;
        cout << tmp.first + (*(++coords.begin())).first << " " << tmp.second + (*(++coords.begin())).second << endl;

        return 0;
    }


    return 0;
}