# D. Рапорт
# Ограничение времени	2 секунды
# Ограничение памяти	256Mb
# Ввод	стандартный ввод или input.txt
# Вывод	стандартный вывод или output.txt
# Верс нужно подготовить рапорт о последнем боевом вылете. Она уже сочинила в голове текст, осталось лишь его записать. Рапорт будет состоять из двух частей: первая будет содержать
# n
#  слов,
# i
# -е из которых состоит из
# a
# i
#  букв, вторая —
# m
#  слов,
# j
# -е из которых состоит из
# b
# j
#  букв. Язык Крии не содержит никаких знаков препинания. Верс должна записать рапорт на клетчатом рулоне бумаги, шириной
# w
#  клеток. Так как рапорт состоит из двух частей, она разделит вертикальной чертой рулон на две части целой ширины, после чего в левой части напишет первую часть, а в правой — вторую.
# Обе части рапорта записываются аналогично, каждая на своей части рулона. Одна буква слова занимает ровно одну клетку. Первое слово записывается в первой строке рулона, начиная с самой левой клетки этой части рулона. Каждое следующее слово, если это возможно, должно быть записано в той же строке, что и предыдущее, и быть отделено от него ровно одной пустой клеткой. Иначе, оно пишется в следующей строке, начиная с самой левой клетки. Если ширина части рулона меньше, чем длина какого-то слова, которое должно быть написано в этой части, написать эту часть рапорта на части рулона такой ширины невозможно.
# Гарантируется, что можно провести вертикальную черту так, что обе части рапорта возможно написать. Верс хочет провести вертикальную черту так, чтобы длина рулона, которой хватит, чтобы написать рапорт, была минимальна. Помогите ей найти эту минимальную длину.
#
# Формат ввода
# В первой строке даны три целых числа
# w
# ,
# n
#  и
# m
#  — ширина рулона, количество слов в первой и второй части рапорта (
# 1
# ≤
# w
# ≤
# 1
# 0
# 9
# ;
# 1
# ≤
# n
# ,
# m
# ≤
# 1
# 0
# 0
# 0
# 0
# 0
# ).
# В следующей строке дано
# n
#  целых чисел
# a
# i
#  — длина
# i
# -го слова первой части рапорта
# 1
# ≤
# a
# i
# ≤
# 1
# 0
# 9
# .
# В следующей строке дано
# m
#  целых чисел
# b
# j
#  — длина
# j
# -го слова второй части рапорта
# 1
# ≤
# b
# j
# ≤
# 1
# 0
# 9
# .
# Гарантируется, что возможно провести черту так, что обе части рапорта возможно написать.
#
# Формат вывода
# В единственной строке выведите одно целое число — минимальную длину рулона, которой достаточно, чтобы написать рапорт.
# Пример
# Ввод
# 15 6 6
# 2 2 2 3 2 2
# 3 3 5 2 4 3
# Вывод
# 3
# Примечания
# В тесте из примера рулон можно разделить на две части, проведя черту между 7 и 8 столбцом клеток, а затем записать
# по два слова в каждой строке в обеих частях рапорта.
def div_up(x, y):
    return (x + y - 1) // y


def length(vec, n, w):
    length = 1
    free = w

    for i in range(n):
        if vec[i] > w:
            return -1
        if vec[i] <= free:
            free -= (vec[i] + 1)
        else:
            i -= 1
            free = w
            length += 1

    return length


def length_papyrus(a, b, N, M, w1, w2):
    return max(length(a, N, w1), length(b, M, w2))


def search(a, b, N, M, W, l, r):
    while l < r:
        mid1 = l + (r - l) // 3
        mid2 = l + div_up(2 * (r - l), 3)

        tmp_len_l = length_papyrus(a, b, N, M, mid1, W - mid1)
        tmp_len_r = length_papyrus(a, b, N, M, mid2, W - mid2)

        if tmp_len_l == tmp_len_r:
            tmp_len_ll = length_papyrus(a, b, N, M, l, W - l)
            tmp_len_rr = length_papyrus(a, b, N, M, r, W - r)

            if tmp_len_rr < tmp_len_r:
                l = mid1
            elif tmp_len_rr > tmp_len_r:
                r = mid2
            else:
                r -= (r - mid2) // 2

            if tmp_len_ll < tmp_len_l:
                r = mid2
            elif tmp_len_ll > tmp_len_l:
                l = mid1
            else:
                l += (l - mid1) // 2

            if l + 1 == r or l == r:
                return r

            if l + 2 == r:
                l += 1
        elif tmp_len_r > tmp_len_l:
            r = mid2 - 1
        else:
            l = mid1 + 1

    return r


def search_new(a, b, N, M, W, l, r):
    while l < r:
        mid = (l + r) // 2

        if length(a, N, mid) < length(b, M, W - mid):
            r = mid
        else:
            l = mid + 1

    return r - 1


W, N, M = map(int, input().split())
a = list(map(int, input().split()))
b = list(map(int, input().split()))

max_a = max(a)
max_b = max(b)

if max_a + max_b == W:
    print(length_papyrus(a, b, N, M, max_a, max_b))
else:
    aa = length(a, N, max_a)
    bb = length(b, M, max_b)

    l = max_b
    r = W - max_a
    res = search_new(b, a, M, N, W, l, r)
    if res == 0:
        res += 1
    kkk = length_papyrus(a, b, N, M, W - res, res)

    l = max_a
    r = W - max_b
    res = search_new(a, b, N, M, W, l, r)
    if res == 0:
        res += 1
    kkk1 = length_papyrus(a, b, N, M, res, W - res)

    print(min(kkk, kkk1))
# python- wa, c++ - ok
