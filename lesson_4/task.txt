#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <sstream>

using namespace std;

//#define ULL unsigned long long

int div_up(int x, int y)
{
    return (x + y - 1) / y;
}

int len(vector<int>& vec, int n, int w)
{
    int len = 1;
    int free = w;

    for (int i = 0; i < n; i++)
    {
        if (vec[i] > w) // если слово больше длины, то вернем ошибку -1
        {
            return -1;
        }
        if (vec[i] <= free) // если залазит слово в свободную часть, то записываем и идем дальше
        {
            free -= (vec[i] + 1); // с учетом пробела
        }
        else // если не залазит слово в свободную часть, то обнуляем свободную часть и прибавляем к длине 1
        {
            i--;
            free = w;
            len++;
        }
    }

    return len;
}

int len_papirus(vector<int>& a, vector<int>& b, int N, int M, int w1, int w2) // определяем длину папируса
{
    return max(len(a, N, w1), len(b, M, w2));
}

int search(vector<int> &a, vector<int> &b, int N, int M, int W, int l, int r)
{
    //int max_a = *max_element(a.begin(), a.end()); // с какой длины стоит начинать
    //int max_b = *max_element(b.begin(), b.end());

    //int l = max_a;
    //int r = W - max_b;

    int mid1;
    int mid2;



    while (l < r)
    {
        mid1 = l + (r - l) / 3;
        mid2 = l + div_up((2 * (r - l)), 3);

        int tmp_len_l = len_papirus(a, b, N, M, mid1, W - mid1);
        int tmp_len_r = len_papirus(a, b, N, M, mid2, W - mid2);

        if (tmp_len_l == tmp_len_r)
        {
            // если равны, то смотрим на l r
            int tmp_len_ll = len_papirus(a, b, N, M, l, W - l);
            int tmp_len_rr = len_papirus(a, b, N, M, r, W - r);

            if (tmp_len_rr < tmp_len_r)
            {
                l = mid1;
            }
            else if (tmp_len_rr > tmp_len_r)
            {
                r = mid2;
            }
            else
            {
                r -= (r - mid2) / 2;
            }

            if (tmp_len_ll < tmp_len_l)
            {
                r = mid2;
            }
            else if (tmp_len_ll > tmp_len_l)
            {
                l = mid1;
            }
            else
            {
                l += (l - mid1) / 2;
            }

            //if (tmp_len_rr == tmp_len_r && tmp_len_ll == tmp_len_l)
            //{
                //int kk = search(a, b, N, M, W, l, r);

                //int min = tmp_len_rr;
                //int imin = r;
                //// просто ебанем перебор...
                //for (int i = l; i <= r; i++)
                //{
                //    int kkk = len_papirus(a, b, N, M, i, W - i);
                //    if (min > kkk)
                //    {
                //        min = kkk;
                //        imin = i;
                //    }
                //}

                //return kk;
            //}

            if (l + 1 == r || l == r) return r;

            if (l + 2 == r) l++;

            //l = mid1;
            //r = mid2;
        }
        else if (tmp_len_r > tmp_len_l)
        {
            r = mid2 - 1;
        }
        else
        {
            l = mid1 + 1;
        }
    }

    return r;
}


int search_new(vector<int>& a, vector<int>& b, int N, int M, int W, int l, int r)
{
    int mid = 0;

    while (l < r)
    {
        mid = (l + r) / 2; // считываем срединный индекс отрезка [l,r]

        if (len(a, N, mid) < len(b, M, W - mid))
            r = mid; // проверяем, какую часть нужно отбросить с поиска
        else
            l = mid + 1;
    }

    return --r;
}

int main()
{
    string input;
    getline(cin, input, ' ');
    int W = stoi(input);

    getline(cin, input, ' ');
    int N = stoi(input);

    getline(cin, input);
    int M = stoi(input);


    vector<int> a;
    vector<int> b;
    a.resize(N);
    b.resize(M);


    for (int i = 0; i < N; i++)
    {
        if (i != N - 1)
        {
            getline(cin, input, ' ');
            a[i] = stoi(input);
        }
        else
        {
            getline(cin, input);
            a[i] = stoi(input);
        }
    }

    for (int i = 0; i < M; i++)
    {
        if (i != M - 1)
        {
            getline(cin, input, ' ');
            b[i] = stoi(input);
        }
        else
        {
            getline(cin, input);
            b[i] = stoi(input);
        }
    }

    int max_a = *max_element(a.begin(), a.end()); // с какой длины стоит начинать
    int max_b = *max_element(b.begin(), b.end());

    if (max_a + max_b == W)
    {
        cout << len_papirus(a, b, N, M, max_a, max_b);
        return 0;
    }

    int aa = len(a, N, max_a); // длины в худшем случае
    int bb = len(b, M, max_b);


    int l = max_b;
    int r = W - max_a;
    // делаем поиск, когда bb было больше аа

    int res = search_new(b, a, M, N, W, l, r);
    if (res == 0) res++;
    int kkk = len_papirus(a, b, N, M, W - res, res);

    l = max_a;
    r = W - max_b;
    // делаем поиск, когда aa было больше bb
    res = search_new(a, b, N, M, W, l, r);
    if (res == 0) res++;
    int kkk1 = len_papirus(a, b, N, M, res, W - res);

    cout << min(kkk, kkk1) << endl;


/*

1000 1 1000
1

672


10 10 10
4 1 2 2 3 2 5 2 2 1
4 1 4 1 5 5 1 2 2 3
9

15 6 6
2 2 2 3 2 2
3 3 5 2 4 3
3

10 5 5
1 1 2 1 2
7 7 1 5 5
4

10 6 6
1 1 1 1 1 1
5 5 5 5 5 5
6

10 6 6
1 1 1 1 1 1
1 5 5 5 5 5
5

10 6 6
1 5 5 5 1 1
1 5 5 5 5 5
6

10 6 6
1 5 1 1 3 1
1 2 2 2 2 2
4

1000 1 1000
744
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
8

1000 1000 1000
246 333 97 239 87 125 319 66 355 397 191 18 331 18 69 313 323 311 312 162 325 234 259 157 287 76 277 31 80 117 129 255 271 366 159 283 276 198 265 177 365 158 319 326 171 124 291 50 226 12 318 306 157 298 313 85 71 201 5 352 210 287 388 154 292 151 189 256 390 45 204 338 260 118 351 164 95 133 266 334 30 375 36 269 72 8 72 336 59 156 213 59 361 7 110 343 246 149 219 96 379 387 390 214 134 308 319 61 24 221 105 109 53 232 106 98 55 277 399 157 60 149 374 289 196 46 210 119 324 106 298 154 389 375 58 124 133 136 192 255 68 66 64 13 105 272 177 257 59 336 286 204 153 356 134 257 322 338 221 120 365 116 217 367 291 345 133 84 144 162 257 316 214 326 160 272 169 78 152 251 387 121 390 301 178 378 391 59 246 325 272 284 164 230 328 61 149 9 57 190 263 131 338 196 267 376 199 357 5 210 191 398 192 113 261 304 7 309 41 31 157 182 364 162 294 301 135 6 204 8 4 347 171 346 195 133 20 280 151 124 14 253 39 108 176 151 173 102 73 200 218 334 41 341 64 331 85 107 103 393 262 117 105 202 58 343 229 161 226 198 223 262 179 46 15 325 181 107 206 30 199 224 172 214 25 163 109 341 16 206 246 263 133 336 229 363 118 90 311 167 100 227 272 369 244 245 198 119 190 189 86 249 385 14 174 153 189 303 209 322 183 24 295 286 217 73 186 143 319 228 105 263 218 238 168 223 193 338 111 356 76 334 183 245 167 387 160 87 181 153 350 145 378 9 167 288 240 305 102 340 195 260 60 209 133 183 105 31 11 117 327 43 317 172 64 324 250 110 243 94 66 337 371 226 26 303 359 44 396 7 332 172 116 170 158 278 20 383 147 146 161 383 176 188 3 73 305 373 185 80 150 176 3 296 400 278 182 172 360 371 140 123 249 214 65 390 65 165 391 36 388 55 67 175 153 40 237 245 59 280 244 247 329 108 312 45 198 252 30 63 313 371 320 334 222 67 234 105 244 14 350 312 126 78 65 165 370 125 236 142 12 190 27 149 108 18 33 256 148 228 339 201 283 286 344 142 28 129 64 194 152 369 138 43 384 279 283 210 60 173 222 22 246 261 191 361 15 323 191 161 330 318 371 360 220 163 21 237 114 82 289 65 91 31 377 347 346 114 258 229 325 8 277 12 265 336 207 211 51 206 65 161 248 395 48 158 254 163 70 106 369 341 111 327 255 71 174 346 140 192 293 62 383 12 128 256 371 76 267 372 247 387 391 190 15 74 89 42 352 396 363 70 375 283 42 210 147 345 262 103 167 80 197 173 281 171 320 195 342 106 35 283 299 34 178 395 173 363 175 93 163 288 149 303 374 338 352 68 168 134 2 50 282 338 272 242 52 196 371 51 129 139 376 152 112 316 352 37 36 190 321 69 53 222 19 55 77 380 35 44 172 156 371 43 85 135 280 158 399 295 347 242 292 318 297 11 325 240 355 157 292 228 239 180 296 391 277 317 269 296 370 123 129 317 168 115 280 221 204 400 122 277 103 224 160 99 118 52 218 62 74 180 155 60 233 297 43 89 251 82 148 135 317 352 198 169 193 25 116 54 44 376 309 156 55 347 179 283 255 340 255 166 38 105 139 150 207 373 142 86 117 52 196 24 197 186 172 30 15 269 312 98 361 247 240 190 284 261 271 101 341 394 21 345 149 221 67 162 322 6 34 93 180 85 268 26 153 268 97 158 65 208 84 143 306 91 60 363 85 221 20 97 359 263 26 293 393 302 99 385 289 350 150 287 327 116 141 208 41 83 343 312 359 96 233 143 279 54 56 353 242 339 64 335 37 41 160 92 209 190 236 209 268 348 362 26 46 162 5 343 229 1 382 172 193 271 85 337 360 216 36 290 243 136 325 144 400 114 263 398 190 76 365 181 100 145 382 96 74 317 70 49 317 245 20 170 128 237 58 325 22 303 369 157 153 331 66 178 294 321 381 393 383 232 390 314 295 187 19 128 217 375 255 237 114 95 331 35 178 296 55 171 144 93 221 274 83 60 87 7 281 118 68 367 355 243 311 353 103 44 40 331 269 287 65 251 371 95 209 390 201 82 349 116 342 145 378 98 97 347 309 143 216 226 107 159 301 172 337 299 83 163 157 319 102 134 106 139 256 262 393 147 149 362 347 319 8 123 343 219 323 104 26 40 212 228 34 105 186 83 275 391 316 161 370 366 290 330 284 318
98 283 528 34 20 280 41 236 583 60 93 119 362 4 136 316 507 76 562 550 540 184 133 358 8 524 208 63 491 77 134 147 504 454 360 580 128 36 583 36 465 506 147 230 253 102 39 290 455 146 498 29 74 276 327 574 81 350 190 187 296 470 145 210 426 223 552 376 464 599 437 54 217 471 305 246 204 374 517 130 127 367 90 222 92 334 153 417 303 374 12 520 449 102 259 315 144 207 424 158 148 96 564 113 28 331 87 17 447 597 420 69 388 249 434 521 418 518 228 446 16 492 418 440 118 92 118 423 314 357 208 383 357 471 523 248 51 36 21 278 583 2 267 378 316 26 442 87 69 132 39 270 86 233 473 170 488 55 345 581 513 25 249 177 394 285 18 32 383 172 324 269 211 349 338 169 433 106 291 415 356 537 523 391 280 116 487 391 358 594 469 501 108 516 522 366 563 176 153 243 359 322 59 583 203 198 185 178 498 119 156 577 247 268 310 531 238 373 6 165 104 394 304 407 99 156 555 478 336 274 553 88 452 158 122 186 495 429 401 37 552 379 421 589 278 445 370 505 512 460 390 118 543 577 36 492 599 587 316 487 114 98 9 591 404 248 434 376 104 523 369 211 409 245 335 428 338 84 110 466 191 362 221 185 506 53 32 139 511 472 86 491 599 585 177 353 33 329 97 145 501 543 185 11 591 525 73 60 50 482 586 508 194 398 229 535 257 585 333 116 19 76 480 121 593 86 98 340 354 136 409 51 326 298 26 294 417 260 275 583 574 389 287 353 9 408 221 494 548 50 185 376 59 286 474 249 48 17 226 426 543 53 121 384 27 146 507 90 184 177 253 293 54 599 556 88 21 112 446 192 499 458 358 381 583 277 20 59 234 298 483 282 297 249 266 335 373 201 404 89 58 332 208 532 483 336 457 329 100 239 134 60 103 168 195 237 504 444 31 480 497 289 156 373 23 11 563 56 74 246 173 418 273 549 90 254 380 438 422 197 312 116 463 419 559 132 441 31 117 232 130 439 76 431 518 130 177 51 500 548 389 377 14 469 244 165 421 538 329 123 380 131 552 591 328 515 155 294 590 36 534 315 589 528 155 443 319 369 215 209 101 273 275 43 360 403 476 226 57 521 67 38 153 323 237 432 26 86 92 287 44 426 164 484 16 500 7 85 433 498 130 413 166 313 54 386 66 267 471 190 532 401 24 320 247 149 486 416 35 211 544 54 34 579 366 315 84 201 167 526 124 445 97 464 536 316 212 312 508 429 319 393 552 100 122 239 446 410 307 390 237 459 369 195 1 166 580 240 304 313 475 12 398 291 260 233 250 536 111 365 447 321 387 273 484 505 376 117 324 577 212 282 255 372 567 174 439 148 70 348 460 227 267 241 409 67 403 384 532 463 239 247 562 495 172 368 360 504 347 281 259 250 345 436 265 232 464 488 118 531 13 390 424 40 280 60 324 373 495 518 175 552 74 168 181 32 560 269 389 242 577 155 450 333 123 261 324 494 430 16 101 253 287 366 93 582 80 462 319 330 334 2 17 227 10 111 440 379 57 584 178 30 228 580 273 83 449 524 167 191 264 70 317 234 502 268 434 487 133 198 386 48 122 467 540 545 486 108 467 464 542 570 151 396 140 211 393 139 339 521 74 57 222 42 268 520 170 113 495 187 191 132 278 441 219 52 16 8 479 264 447 384 352 578 380 412 207 48 33 461 490 188 125 126 344 285 444 73 385 500 213 320 100 392 538 285 455 194 91 514 507 210 443 450 53 480 561 447 431 211 217 153 508 350 521 525 495 430 356 139 469 469 66 576 294 338 558 354 376 167 487 247 364 450 599 78 495 316 535 491 91 573 249 400 451 398 253 303 346 53 293 185 109 453 600 258 12 435 66 202 517 386 411 333 233 256 60 508 149 423 37 458 571 189 82 216 574 508 425 18 129 562 165 296 297 490 574 302 182 426 335 428 399 475 415 366 19 292 441 253 256 63 115 524 519 235 395 36 22 480 533 224 181 158 446 474 202 566 125 596 549 519 52 328 132 67 595 161 144 143 462 111 102 311 74 207 168 527 484 513 529 467 258 536 589 120 495 14 294 200 443 477 408 507 201 38 6 592 344 542 506 392 59 236 441 196 337 85 165 482 293 257 361 572 494 43 329 600 457 468 255 313 402 128 31 228 183 191 332 116 197 246 328 503 160 484 24 471 584 21 254 122 438 82 494 379 588 39 161 190 298 348 349 143 489 101 290 36 300 586
672


11 8 4
2 1 1 2 1 2 1 2
1 2 1 3
3

*/

    return 0;
}