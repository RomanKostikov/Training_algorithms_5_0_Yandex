# C. Саруман
# Ограничение времени 4 секунды Ограничение памяти 256Mb
#
# Ввод стандартный ввод или input.txt Вывод стандартный вывод или output.txt
#
# Как известно, Саруман Радужный очень любит порядок. Поэтому все полки его войска стоят друг за другом, причем каждый
# следующий полк содержит количество орков не меньше, чем предыдущий.
#
# Перед тем как напасть на Хельмову Падь, Саруман решил провести несколько вылазок для разведки. Чтобы его отряды никто не
# заметил, он решил каждый раз отправлять несколько подряд идущих полков так, чтобы суммарное количество орков в них было
# равно определенному числу. Так как это всего лишь разведка, каждый полк после вылазки возвращается на свое место. Задачу
# выбрать нужные полки он поручил Гриме Змеиному Языку. А Грима не поскупится на вознаграждение, если вы ему поможете.
#
# Формат ввода
#
# В первой строке входного файла находится два целых числа: n (1 ≤ n ≤ 2⋅105) — количество полков и m (1 ≤ m ≤ 2⋅105) –
# количество предстоящих вылазок.
#
# В следующей строке записано n чисел ai, где ai — число орков в i-ом полке (1 ≤ ai ≤ 109, ai ≤ ai+1).
#
# Далее в m строках записаны запросы вида: количество полков l (1 ≤ l ≤ n), которые должны будут отправиться в эту
# вылазку, и суммарное количество орков в этих полках s (1 ≤ s ≤ 2⋅1016)
#
# Формат вывода
#
# Для каждого запроса выведите номер полка, с которого начнутся те l, которые необходимо отправить на вылазку. Если таких
# полков несколько, выведите любой. Если же так выбрать полки нельзя, выведите -1.
#
# Пример Ввод
#
# 5 2 1 3 5 7 9 2 4 1 3
# Вывод
# 1 2

def bin_search(vec, l, r, count, sum):
    while l < r:
        mid = (l + r) // 2

        if mid - count < 0:
            break

        if vec[mid] - vec[mid - count] > sum:
            r = mid
        else:
            l = mid + 1

    return r - 1


def main():
    N = int(input())
    vec = [0] + [sum(map(int, input().split())) for _ in range(N)]

    M = int(input())
    zapros = [list(map(int, input().split())) for _ in range(M)]

    for query in zapros:
        res = bin_search(vec, query[0] - 1, N + 1, query[0], query[1])

        if res - query[0] < 0:
            print("-1", end=" ")
            continue

        test = vec[res] - vec[res - query[0]]

        if test == query[1]:
            print(res - query[0] + 1, end=" ")
        else:
            print("-1", end=" ")

    print()


if __name__ == "__main__":
    main()
# сдал на C++
